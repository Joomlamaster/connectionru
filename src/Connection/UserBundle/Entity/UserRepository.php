<?php

namespace Connection\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * eventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findByFbId($id)
    {
        return $this->createQueryBuilder('u')
            ->select('u')
            ->join('u.profile', 'p')
            ->where('p.facebookId = :facebook_id')
            ->setParameter('facebook_id', $id)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findByTwitterId($id)
    {
        return $this->createQueryBuilder('u')
            ->select('u')
            ->join('u.profile', 'p')
            ->where('p.twitterId = :twitter_id')
            ->setParameter('twitter_id', $id)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getLatest($limit)
    {
        return $this->createQueryBuilder('u')
            ->select('u')
            ->join('u.profile', 'p')
            ->orderBy('u.createdAt')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function countAll()
    {
        return $this->createQueryBuilder('u')
            ->select('COUNT(u.id) AS total')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function search($filter, $limit, $offset)
    {
        $qb = $this->createQueryBuilder('u')
            ->join('u.profile', 'p');

        //  Filter By Country
        if ( !empty($filter['country']) ) {
            $qb->join('p.country', 'c')->andWhere('c.id = :country')->setParameter('country', $filter['country']);
        }

        //  Filter By State
        if ( !empty($filter['state']) ) {
            $qb->join('p.state', 'st')->andWhere('st.id = :state')->setParameter('state', $filter['state']);
        }

        //  Found person should seek for searcher gender
        if ( !empty($filter['gender']) ) {
            $qb->join('p.seek', 's')->andWhere('s.id = :gender')->setParameter('gender', $filter['gender']);
        }

        //  Found person gender should be equal to searcher seek
        if ( !empty($filter['seek']) ) {
            $qb->join('p.gender', 'g')->andWhere('g.id = :seek')->setParameter('seek', $filter['seek']);
        }

        //  Filter By LookingFor
        if ( !empty($filter['lookingFor']) ) {
            $qb->join('p.lookingFor', 'lf')->andWhere('lf.id = :looking_for')->setParameter('looking_for', $filter['lookingFor']);
        }

        //  Filter By Age
        if ( !empty($filter['age']) ) {
            $age = explode("_", $filter['age']);
            if ( !empty($age[0]) && !empty($age[1]) ) {
                $to     = new \DateTime("-{$age[0]} years");
                $from   = new \DateTime("-{$age[1]} years");

                $qb->andWhere('p.birthdate < :age_to')->setParameter('age_to', $to);
                $qb->andWhere('p.birthdate > :age_from')->setParameter('age_from', $from);
            }
        }

        $qb->setMaxResults($limit);
        $qb->setFirstResult($offset);

        return $qb->getQuery()->getResult();
    }
}
